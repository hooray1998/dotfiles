

"=================================================================
"		Vim-plug 插件管理       
"=================================================================

call plug#begin('~/.vim/plugged')
"======================================="
"打字机音效
"Plug 'skywind3000/vim-keysound'
"GTags
"多用c-w ] 代替c-]
"Plug 'ludovicchabant/vim-gutentags'
"AsyncRun shell command
Plug 'skywind3000/asyncrun.vim'
"Async syntax check
Plug 'w0rp/ale'
"better highlight for cpp"
Plug 'octol/vim-cpp-enhanced-highlight'
"leaderF"
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
"使用- 快速进入文件浏览器"
Plug 'justinmk/vim-dirvish'
"函数参数提醒"似乎会很卡
"Plug 'Shougo/echodoc.vim'
"======================================="
"	i, 和 a, ：参数对象 eg.   vi,  ci,  di,
"	ii 和 ai ：缩进对象 eg.   vii  cii  dii
"	if 和 af ：函数对象 eg.   vif  cif  dif
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'sgur/vim-textobj-parameter'
"======================================="
""匹配的括号或标签同时修改"
Plug 'tpope/vim-surround'  
" 工程文件浏览
Plug 'scrooloose/nerdtree'
" 增加缩进指示线 "会影响markdown的显示效果，很多语法都给隐藏了
"Plug 'Yggdroot/indentLine'
" 括号补全 "
Plug 'jiangmiao/auto-pairs'
Plug 'tell-k/vim-autopep8'
" 快速代码注释
Plug 'scrooloose/nerdcommenter'
" 美化状态栏和标签页 "
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" 写html利器
Plug 'mattn/emmet-vim'
" Pending tasks list
Plug 'fisadev/FixedTaskList.vim'

" Markdown syntastic highlight
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Markdown realtime preview
" `sudo npm -g install instant-markdown-d`
" Use :InstantMarkdownPreview  open the windows, using vpn will make it invalid
Plug 'suan/vim-instant-markdown'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

"monokai theme
Plug 'patstockwell/vim-monokai-tasty'
"模糊搜索fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } 
Plug 'junegunn/fzf.vim'
"超强的自动补全
Plug 'Valloric/YouCompleteMe'
augroup load_ycm
	"延时加载"
	autocmd!
	autocmd InsertEnter * call plug#load('YouCompleteMe') | autocmd! load_ycm
augroup END

call plug#end()
"===============================================================
"    NOTE:  显示相关  
"===============================================================
" 设置配色方案
set background=dark
"let g:vim_monokai_tasty_italic = 1 "加上这句后 注释会有底色，很丑"
colorscheme vim-monokai-tasty
let g:lightline = { 'colorscheme': 'monokai_tasty', }
let g:airline_theme='monokai_tasty'

syntax on
set nu
set shiftwidth=4
set go=             " 不要图形按钮  
set guifont=Monaco:h16   " 设置字体  
autocmd InsertLeave * se nocul  " 用浅色高亮当前行  
autocmd InsertEnter * se cul    " 用浅色高亮当前行  
set showcmd         " 输入的命令显示出来，看的清楚些  
"set novisualbell    " 不要闪烁(不明白)  
set laststatus=2    " 启动显示状态行(1),总是显示状态行(2)  

"编码"
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8


"==================================================================
"	  NOTE: 实用设置
"==================================================================

" 设置当文件被改动时自动载入
set autoread
"代码补全 
set completeopt=preview,menu 
" 设定补全行为"
set wildmode=full

"允许插件  
"通过% 实现XML标签的跳转"
set nocompatible
filetype plugin on
runtime macros/matchit.vim
"共享剪贴板  
set clipboard+=unnamed 
"从不备份  
set nobackup
"自动保存
set autowrite
set ruler					" 显示状态栏标尺"
set cursorline              " 突出显示当前行
set magic                   " 设置魔术
set guioptions-=T           " 隐藏工具栏
set guioptions-=m           " 隐藏菜单栏
" 设置在状态行显示的信息
set foldenable              " 开始折叠
set foldcolumn=0
set foldmethod=indent 
set foldlevel=3 
set foldlevelstart=99

" 去掉输入错误的提示声音
set noeb
" 在处理未保存或只读文件的时候，弹出确认
set confirm
" 自动缩进
set autoindent
set cindent
" Tab键的宽度
set tabstop=4
" 统一缩进为4
set softtabstop=4
set shiftwidth=4
" 不要用空格代替制表符
set noexpandtab
" 在行和段开始处使用制表符
set smarttab
" 历史记录数
set history=1000
"禁止生成临时文件
set nobackup
set noswapfile
"搜索忽略大小写
set ignorecase
" 如果有一个大写字母，则切换到大小写敏感查找
set smartcase
"搜索逐字符高亮
set hlsearch
set incsearch
"行内替换
set gdefault
"语言设置
set langmenu=zh_CN.UTF-8
set helplang=cn
" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=1
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" 字符间插入的像素行数目
set linespace=0
" 增强模式中的命令行自动完成操作
set wildmenu
" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" 允许backspace和光标键跨越行边界
set whichwrap+=<,>,h,l
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse=a
set selection=exclusive
set selectmode=mouse,key
" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3
" 为C程序提供自动缩进
set smartindent
" 高亮显示普通txt文件（需要txt.vim脚本）
au BufRead,BufNewFile *  setfiletype txt
filetype plugin indent on 
"打开文件类型检测, 加了这句才可以用智能补全
set completeopt=longest,menu

"===============================================================
"    NOTE:  识别Alt
"===============================================================
function! Terminal_MetaMode(mode)
    set ttimeout
    if $TMUX != ''
        set ttimeoutlen=30
    elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
        set ttimeoutlen=80
    endif
    if has('nvim') || has('gui_running')
        return
    endif
    function! s:metacode(mode, key)
        if a:mode == 0
            exec "set <M-".a:key.">=\e".a:key
        else
            exec "set <M-".a:key.">=\e]{0}".a:key."~"
        endif
    endfunc
    for i in range(10)
        call s:metacode(a:mode, nr2char(char2nr('0') + i))
    endfor
    for i in range(26)
        call s:metacode(a:mode, nr2char(char2nr('a') + i))
        call s:metacode(a:mode, nr2char(char2nr('A') + i))
    endfor
    if a:mode != 0
        for c in [',', '.', '/', ';', '[', ']', '{', '}']
            call s:metacode(a:mode, c)
        endfor
        for c in ['?', ':', '-', '_']
            call s:metacode(a:mode, c)
        endfor
    else
        for c in [',', '.', '/', ';', '{', '}']
            call s:metacode(a:mode, c)
        endfor
        for c in ['?', ':', '-', '_']
            call s:metacode(a:mode, c)
        endfor
    endif
endfunc
 
call Terminal_MetaMode(0)
"noremap <ESC>x :echo "ALT-X pressed"<cr>  "没有设置超时，容易误操作"
"noremap <M-x> :echo "ALT-X pressed"<cr>
exec "set <M-x>=\ex"
exec "set <M-j>=\ej"
exec "set <M-k>=\ek"
exec "set <M-s>=\es"
exec "set <M-d>=\ed"
exec "set <M-p>=\ep"
"超时时间
set ttimeout ttimeoutlen=50

"===============================================================
"    NOTE:  新文件标题
"===============================================================
autocmd BufNewFile *.cpp,*.[ch],*.py,*.sh,*.java exec ":call Settitle()" 
""定义函数Settitle，自动插入文件头 
func Settitle() 
    "如果文件类型为.sh文件 
    if &filetype == 'sh' 
        call setline(1,"\#!/bin/bash") 
        call append(line(".")+6, "") 
	elseif &filetype == 'python' 
	else
		call setline(1, "/*=========================================================") 
		call append(line("."), "> File Name: ".expand("%")) 
		call append(line(".")+1, "> Author:hooray") 
		call append(line(".")+2, "> Mail:hoorayitt@gmail.com ") 
		call append(line(".")+3, "> Created Time: ".strftime("%c")) 
		call append(line(".")+4, "> =======================================================*/") 
		call append(line(".")+5, "")
    endif
    if &filetype == 'cpp'
        call append(line(".")+6, "#include<bits/stdc++.h>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
        call append(line(".")+9, "int main(){")
        call append(line(".")+10, "")
        call append(line(".")+11, "\treturn 0;")
        call append(line(".")+12, "}")
		. normal 11G
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
		. normal G
    endif
    if &filetype == 'python'
		call setline(1,"# -*- coding:utf-8 -*-") 
		call append(line("."), "".expand("")) 
		. normal G
    endif
    "新建文件后，自动定位到文件末尾
    "autocmd BufNewFile * normal G
endfunc 

"==================================================================="
"	NOTE:  函数说明
"==================================================================="
func SetComment() 
    "如果文件类型为.sh文件 
	if &filetype == 'python' 
        call append(line(".")-1, "") 
        call append(line(".")-1, "\#===============================================================") 
		call append(line(".")-1, "\#   func_name:") 
        call append(line(".")-1, "\#    describe:  ") 
        call append(line(".")-1, "\#===============================================================") 
        call append(line(".")-1, "") 
		. normal kkk$
	else
        call append(line(".")-1, "\"===============================================================") 
		call append(line(".")-1, "\"    NOTE:  ") 
        call append(line(".")-1, "\"===============================================================") 
		. normal kk$
	endif
endfunc 

"===============================================================
"    NOTE:  自定义函数
"===============================================================

""""""""""""""""""""""
"Quickly Run
""""""""""""""""""""""
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'java'
		exec "!javac %"
		exec "!time java %<"
	elseif &filetype == 'sh'
		:!time bash %
	elseif &filetype == 'python'
		exec "!time python %"
	elseif &filetype == 'html'
		exec "!firefox % &"
	elseif &filetype == 'go'
		exec "!go build %<"
		exec "!time go run %"
	elseif &filetype == 'mkd'
		exec "!~/.vim/markdown.pl % > %.html &"
		exec "!firefox %.html &"
	endif
endfunc


function! s:VSetSearch()
let temp = @s
norm! gv"sy
let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
let @s = temp
endfunction

func! MakeCoding()
    if &filetype == 'cpp'
		exec ":AsyncRun g++ -Wall -O2 \"$(VIM_FILEPATH)\" -o \"$(VIM_FILEDIR)/$(VIM_FILENOEXT)\""
	elseif &filetype == 'c'
		exec ":AsyncRun gcc -Wall -O2 \"$(VIM_FILEPATH)\" -o \"$(VIM_FILEDIR)/$(VIM_FILENOEXT)\""
	else
    endif
endfunc 
func! RunCoding()
	exec ":w"
    if &filetype == 'cpp'||&filetype == 'c'
		exec ":!clear;echo '<<===>>  Making  <<===>>';g++ -o /tmp/run%:t:r %;echo '<<===>>  Runing  <<===>>';time /tmp/run%:t:r"
	elseif &filetype == 'python'
		exec ":!clear; echo '<<===>>  Runing  <<===>>';time python %"
	elseif &filetype == 'sh'
		exec ":!chmod +x %;./%"
	elseif &filetype == 'html'
		"exec "!open -a \"\/Applications\/Google\ Chrome.app\" %"
		exec ":!google-chrome %"
	elseif expand('%:e') == 'awk'
		exec "AsyncRun awk -f % ".expand('%:r').".data"
	elseif expand('%:e') == 'md'
		exec ":InstantMarkdownPreview"
	else
		exec ":e %"
    endif
endfunc 
func! AsyncRunCoding()
	exec ":w"
	if &filetype == 'python'
		exec ":AsyncRun python %"
	elseif &filetype == 'sh'
		exec ":!chmod +x %;./%"
	elseif &filetype == 'html'
		"exec "!open -a \"\/Applications\/Google\ Chrome.app\" %"
		exec "google-chrome %"
	elseif expand('%:e') == 'awk'
		exec "AsyncRun awk -f % ".expand('%:r').".data"
	elseif expand('%:e') == 'md'
		exec ":InstantMarkdownPreview"
	else
		exec ":e %"
    endif
endfunc 

func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %<"
    exec "!gdb ./%<"
endfunc

"===============================================================
"    NOTE:  Tree indentLine autopep8 mapleader
"===============================================================

let NERDTreeChDirMode=1
"显示书签"
let NERDTreeShowBookmarks=0
"设置忽略文件类型"
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
"窗口大小"
let NERDTreeWinSize=25

"缩进指示线"
"let g:indentLine_char='┆'
"let g:indentLine_enabled = 1

"autopep8设置"
let g:autopep8_disable_show_diff=1


"===============================================================
"    NOTE:  HTML补全， CSS跳转
"===============================================================
"解决办法：只要把下面两段代码粘贴到~/.vimrc中，就可以实现括号超强补全
"<!--括号引号补全代码{{{-->
" html自动补全
"autocmd BufNewFile *  setlocal filetype=html
"function! InsertHtmlTag()
"let pat = '\c<\w\+\s*\(\s\+\w\+\s*=\s*[''#$;,()."a-z0-9]\+\)*\s*>'
"normal! a>
"let save_cursor = getpos('.')
"let result = matchstr(getline(save_cursor[1]), pat)
"if (search(pat, 'b', save_cursor[1]))
	"normal! lyiwf>
	"normal! a</
	"normal! p
	"normal! a>
"endif
"call cursor(save_cursor[1], save_cursor[2], save_cursor[3])
"endfunction
"inoremap > <ESC>:call InsertHtmlTag()<CR>a<CR><Esc>O
"<!--}}}-->

"跳转至其css
function! JumpToCSS()
let id_pos = searchpos("id", "nb", line('.'))[1]
let class_pos = searchpos("class", "nb", line('.'))[1]

if class_pos > 0 || id_pos > 0
if class_pos < id_pos
  execute ":vim '#".expand('<cword>')."' **/*.css"
elseif class_pos > id_pos
  execute ":vim '.".expand('<cword>')."' **/*.css"
endif
endif
endfunction


"===============================================================
"    NOTE:  CTags and GTags
"===============================================================
"ctags
set tags=./.tags;,.tags
" for gutentags"
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']


"===============================================================
"    NOTE:  YouCompleteMe
"===============================================================
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone
 
noremap <c-z> <NOP>
 
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }
"YouCompleteMe for Ubuntu
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
"YouCompleteMe for mac
"let g:ycm_complete_in_comments = 0 "注释中补全
"let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:syntastic_ignore_files=[".*\.py$"]
"let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_complete_in_comments = 1
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_server_python_interpreter='/usr/local/bin/python3'
"let g:ycm_global_ycm_extra_conf='/Users/iff/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'

let Tlist_Auto_Highlight_Tag=1  
let Tlist_Auto_Open=1  
let Tlist_Auto_Update=1  
let Tlist_Display_Tag_Scope=1  
let Tlist_Exit_OnlyWindow=1  
let Tlist_Enable_Dold_Column=1  
let Tlist_File_Fold_Auto_Close=1  
let Tlist_Show_One_File=1  
let Tlist_Use_Right_Window=1  
let Tlist_Use_SingleClick=1  

filetype plugin on  
autocmd FileType python set omnifunc=pythoncomplete#Complete  
autocmd FileType javascrīpt set omnifunc=javascriptcomplete#CompleteJS  
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags  
autocmd FileType css set omnifunc=csscomplete#CompleteCSS  
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags  
autocmd FileType php set omnifunc=phpcomplete#CompletePHP  
autocmd FileType c set omnifunc=ccomplete#Complete  


"===============================================================
"    NOTE:  LeaderF
"===============================================================
"tagbar 替代品leaderF, 相关功能和fzf类似
"let g:Lf_ShortcutF = '<c-p>'
"let g:Lf_ShortcutB = '<m-n>'
"noremap <c-n> :LeaderfMru<cr>
"noremap <m-p> :LeaderfFunction!<cr>
"noremap <m-n> :LeaderfBuffer<cr>
"noremap <m-m> :LeaderfTag<cr>
"let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

"let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
"let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
"let g:Lf_CacheDirectory = expand('~/.vim/cache')
"let g:Lf_ShowRelativePath = 0
"let g:Lf_HideHelp = 1
"let g:Lf_StlColorscheme = 'powerline'
"let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}

"===============================================================
"    NOTE:  Airline Options
"===============================================================
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''   "''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''   "''显示有问题
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''

let g:airline_powerline_fonts=1
set laststatus=2 "1为关闭底部状态栏 2为开启"
set t_Co=256     "终端开启256色支持"
set ambiwidth=double "防止特殊符号无法正常显示
let g:airline#extensions#tabline#enabled=1 "顶部tab显示
"let g:airline_theme='bubblegum'  "murmur配色也不错
let g:airline_section_y = ''
let g:airline_section_error = ''
let g:airline_section_warning = ''

"===============================================================
"    NOTE:  打字机
"===============================================================
let g:keysound_enable = 1
let g:keysound_py_version = 3
let g:keysound_volume = 1000
let g:keysound_theme = 'typewriter'
"设置默认音效主题，可以选择：default, typewriter, mario, bubble, sword



"===============================================================
"    NOTE:  Signify
"===============================================================
" this first setting decides in which order try to guess your current vcs
" UPDATE it to reflect your preferences, it will speed up opening files
let g:signify_vcs_list = [ 'git', 'hg' ]
" mappings to jump to changed blocks
"nmap <Space>d <plug>(signify-next-hunk)
"nmap <Space>D <plug>(signify-prev-hunk)
" nicer colors
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227

"===============================================================
"    NOTE:  ALE
"===============================================================
"for ale
"let g:ale_linters_explicit = 1
let g:ale_set_highlights = 0
let g:ale_completion_delay = 500
let g:ale_echo_delay = 500
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '%code: %%s'
let g:ale_lint_on_text_changed = 'never'
let g:airline#extensions#ale#enabled = 1
 
let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
highlight clear ALEErrorSign
highlight clear ALEWarningSign
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '.'

"for ale format"
"autocmd FileType python noremap <buffer> <F5> :ALEFix<CR>
"let g:ale_fixers = { 'python': ['add_blank_lines_for_python_control_statements','autopep8','isort','yapf','remove_trailing_lines','trim_wh' }



"===============================================================
"    NOTE:  AsyncRun cpp-highlight newtw echodoc
"===============================================================
"for asyncrun"
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 10

" 任务结束时候响铃提醒
let g:asyncrun_bell = 1

"for the left of vim-signify
set signcolumn=yes

"for cpp highlight
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1

"newtw"
let NERDTreeHijackNetrw=1

"for echodoc.vim"  使用<C-y>
set noshowmode


"===============================================================
"    NOTE:  For Notes
"===============================================================
" 集成Enter，list快速进入文件，markdown快速运行代码
nnoremap <Enter> :call EnterFile()<CR>
function EnterFile()
	if expand("%:e")=='list'
		.normal $gf
	elseif expand("%:e")=='md'
		.normal mb?```"ayy
		let loc_cpp=match(@a,"cpp")
		let loc_python=match(@a,"python")
		if loc_cpp>-1
			.normal VNkoj:w /tmp/tmp.cpp
			exec ":!clear;echo '<<===>>  Making  <<===>>';g++ -o /tmp/run%:t:r /tmp/tmp.cpp;rm /tmp/tmp.cpp;echo '<<===>>  Runing  <<===>>'; /tmp/run%:t:r"
		elseif loc_python>-1
			.normal VNkoj:w !python
		endif
		.normal `b
	else
		.normal j
	endif
endfunc

"===============================================================
"    NOTE:  For Markdown
"===============================================================

" markdown "
let g:markdown_enable_conceal = 0
let g:markdown_enable_insert_mode_mappings = 0
let g:instant_markdown_autostart = 0

" 可是模式输入C-l增加行号
vnoremap <C-l> :call AddListNumber()<CR>
function AddListNumber()
	let lnum = getpos('.')[1] + 1 - getpos("'<")[1]
	. normal I=lnum. 
endfunc
vnoremap <C-k> :call AddListFlag()<CR>
function AddListFlag()
	. normal ^i- 
endfunc
vnoremap <C-c> omaoo```'aO```
nnoremap # :call SetTitle()<CR>
function SetTitle()
	.normal "yyy
	if match(@y,"#")>-1
		.normal I#
	else
		.normal I# 
	endif
endfunc


"======================================================="
"	 NOTE:  For Python
"======================================================="
nnoremap <Space>p Iprint($a)^j
nnoremap <Space>P Iprint("$a")^j

command! Format :call FileFormat()
func FileFormat() 
	if &filetype == 'python' 
		exec "!python ~/.local/config/FormatPython.py %"
	endif
endfunc 

"=================================================================
"    NOTE:  所有模式下f键翻译选中区域
"=================================================================
vnoremap f y:AsyncRun $HOME/.local/config/search_and_record.sh "\|awk -f $HOME/.local/config/simplify.awk 
nnoremap <C-f> yaw:AsyncRun $HOME/.local/config/search_and_record.sh "\|awk -f $HOME/.local/config/simplify.awk 
inoremap <C-f> yaw:AsyncRun $HOME/.local/config/search_and_record.sh "\|awk -f $HOME/.local/config/simplify.awk 


let g:tlTokenList = ["FIXME",  "TODO",  "###", "QSTN", "HACK", "NOTE", "WARN", "MODIFY"]
let g:tlRememberPosition = 1  "下次打开时会恢复到上次关闭时的位置
"===============================================================
"    NOTE:  常用键盘快捷键
"===============================================================

"设置<Space>为空格键
"let mapleader="\<Space>"

"快速遍历缓冲区"
noremap <silent> <Tab> :bn<CR>
noremap <silent> <S-Tab> :bp<CR>

"映射显示当前文件目录的快捷键"
cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'

"插入&&命令模式下上下左右
"需要设置终端，Del发送Esc序列，Backspace发送ASCII Del
inoremap <C-h> <left>
"inoremap <C-j> <C-n>
"inoremap <C-k> <C-p>
inoremap <C-l> <right>
inoremap <c-a> <Home>
inoremap <c-e> <End>
cnoremap <c-h> <left>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-l> <right>
cnoremap <c-a> <Home>
cnoremap <c-e> <End>

"H,L移动到行首行尾
map H ^
map L $
"可视模式下移动到行尾
vnoremap L $h

"保存文件
nnoremap <Space>w :w<CR>
nnoremap <Space>W :w !sudo tee % > /dev/null <CR>
nnoremap <Space>i :bd %<CR><CR>
nnoremap <Space>e :exit<CR>
"快捷复制粘贴至系统
nnoremap <C-A> ggVG"+y<CR>
"nnoremap <Space>v :r !pbpaste<CR>
"vnoremap <Space>c :w !pbcopy<CR><CR>
nnoremap <Space>v "+p
vnoremap <Space>y "+y
"打开文件管理器
nnoremap <C-t> :tabnew .<CR>5j
nnoremap <Space>, gT
nnoremap <Space>. gt
nnoremap <Space>f :Files ~<CR>
nnoremap <silent> <Space>b :Buffers<CR>
nnoremap <silent> <Space>l :Lines<CR>

"运行cpp  和 python, 先清屏
nnoremap <Space>r :call RunCoding()<CR>
nnoremap <Space>R :call AsyncRunCoding()<CR>

"C-l 清除高亮
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" 重定义*, 使其那能够搜索选中文本
xnoremap * : <C-u> call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # : <C-u> call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

"比较文件  
nnoremap <C-F4> :vert diffsplit 

"C,C++的调试
nnoremap <C-F5> :call Rungdb()<CR>

"F8开启和关闭树"
map <F8> :NERDTreeToggle<CR>
nnoremap <Space>]  :call JumpToCSS()<CR>

" 设置 F10 打开/关闭 Quickfix 窗口
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>

"切换头/源文件
noremap <M-x> :A<CR>
"增加说明
nnoremap <M-p> :call SetComment()<CR>

"快速代码注释
map <F7> <Space>ci <CR>  

"查看函数定义
nnoremap <F9> :LeaderfFunction!<CR>
nnoremap <C-k> :LeaderfFunction!<CR>

source $HOME/.vimrc_1

"	记录上一次的markdown笔记的目录
autocmd VimEnter  * call RecordPath()
function RecordPath()
	if match(expand("%:p"),'Notes') > -1
		call writefile([expand("%:p")],expand("$HOME/.last-vim-list/last-note"))
	endif
	if match(expand("%:e"), 'md') > -1
		call writefile([expand("%:p")],expand("$HOME/.last-vim-list/last-md"))
	elseif match(expand("%:e"), 'py') > -1
		call writefile([expand("%:p")],expand("$HOME/.last-vim-list/last-py"))
	elseif match(expand("%:e"), 'cpp') > -1
		call writefile([expand("%:p")],expand("$HOME/.last-vim-list/last-cpp"))
	endif
endfunc

